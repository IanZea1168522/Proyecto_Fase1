/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyecto_fase1_zea_1168522_izaguirre_1170522;

import static java.awt.image.ImageObserver.WIDTH;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 *
 * @author izeac
 */
public class Perfil extends javax.swing.JFrame {

    /**
     * Creates new form Perfil
     */
    
    //variable que me guarde el usuario, esto para poder dar de baja la cuenta
    String usuarioGlo;
    
    public Perfil() {
        initComponents();
    }
    public Perfil(String usuario) 
    {
        initComponents();
        //se escribe en pantalla
        labelUsuario.setText("Usuario: " + usuario.split("\\|")[0]);
        labelNombre.setText("Nombre: " + usuario.split("\\|")[1]);
        labelApellido.setText("Apellido: " + usuario.split("\\|")[2]);
        labelFecha.setText("Nació el: " + usuario.split("\\|")[5]);
        labelCorreo.setText("Correo: " + usuario.split("\\|")[6]);
        labelNum.setText("Teléfono: " + usuario.split("\\|")[7]);
        //se guarda el usuario
        usuarioGlo = usuario;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        labelUsuario = new javax.swing.JLabel();
        labelApellido = new javax.swing.JLabel();
        labelNombre = new javax.swing.JLabel();
        labelFecha = new javax.swing.JLabel();
        labelCorreo = new javax.swing.JLabel();
        labelNum = new javax.swing.JLabel();
        btncerrarsesion = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Gadugi", 0, 24)); // NOI18N
        jLabel3.setText("PAGINA PRINCIPAL:");

        labelUsuario.setFont(new java.awt.Font("Gadugi", 0, 18)); // NOI18N
        labelUsuario.setText("Usuario:");

        labelApellido.setFont(new java.awt.Font("Gadugi", 0, 18)); // NOI18N
        labelApellido.setText("Apellido:");

        labelNombre.setFont(new java.awt.Font("Gadugi", 0, 18)); // NOI18N
        labelNombre.setText("Nombre: ");

        labelFecha.setFont(new java.awt.Font("Gadugi", 0, 18)); // NOI18N
        labelFecha.setText("Fecha de Nacimiento: ");

        labelCorreo.setFont(new java.awt.Font("Gadugi", 0, 18)); // NOI18N
        labelCorreo.setText("Correo: ");

        labelNum.setFont(new java.awt.Font("Gadugi", 0, 18)); // NOI18N
        labelNum.setText("Número de teléfono: ");

        btncerrarsesion.setBackground(new java.awt.Color(153, 204, 255));
        btncerrarsesion.setFont(new java.awt.Font("Gadugi", 0, 14)); // NOI18N
        btncerrarsesion.setForeground(new java.awt.Color(0, 0, 0));
        btncerrarsesion.setText("Cerrar Sesión");
        btncerrarsesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncerrarsesionActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(153, 204, 255));
        jButton1.setFont(new java.awt.Font("Gadugi", 0, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setText("Borrar Cuenta");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelNum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelCorreo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelFecha, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelApellido, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 44, Short.MAX_VALUE))
                    .addComponent(labelUsuario, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelNombre, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btncerrarsesion, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelUsuario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelNombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelApellido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelFecha))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btncerrarsesion, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15)
                .addComponent(labelCorreo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelNum)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btncerrarsesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncerrarsesionActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Gracias por usar nuestra red! vuelva pronto",  "Gracias!", WIDTH);
        new Inicio().setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btncerrarsesionActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String strError = "";
        //se obtienen las 4 listas, la de bitacora, su descriptor, la de usuarios y su descriptor
        String rutaUs = "C:\\MEIA\\Usuario.txt";
        String rutaBit = "C:\\MEIA\\Bitacora.txt";
        String rutaDesUs = "C:\\MEIA\\Desc_Usuario.txt";
        String rutaDesBit = "C:\\MEIA\\Desc_Bitacora.txt";
        //creamos las listas
        List<String> listaBit = new ArrayList<>();
        List<String> listaUs = new ArrayList<>();
        List<String> listaDesBit = new ArrayList<>();
        List<String> listaDesUs = new ArrayList<>();
        //se llenan
        if(comprobar(rutaBit, strError) > 0)
        {
            listaBit = Obtener(rutaBit, strError);
        }
        if(comprobar(rutaUs, strError) > 0)
        {
            listaUs = Obtener(rutaUs, strError);
        }
        listaDesBit = Obtener(rutaDesBit, strError);
        listaDesUs = Obtener(rutaDesUs, strError);
        //obtenemos la fecha del día de hoy
        LocalDateTime fechaHoraActual = LocalDateTime.now();
        DateTimeFormatter forma = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        //indice de donde se encuentra la cuenta a borrar
        int indice = -1;
        indice = buscarPorCriterio(listaBit, usuarioGlo.split("\\|")[0]);
        //si se encontró en la primera lista, se hace el cambio
        if(indice != -1)
        {
            //cambiamos de 1 a 0
            String[] partesUsuario = usuarioGlo.split("\\|");
            // Cambiar el valor en la posición 9
            partesUsuario[9] = "0";
            // Unir las partes modificadas en una cadena nuevamente
            usuarioGlo = String.join("|", partesUsuario);
            //cambiamos el elemento de la lista
            listaBit.set(indice, usuarioGlo);
            //modificamos el descriptor
            listaDesBit.set(3, String.valueOf(fechaHoraActual.format(forma)));
            listaDesBit.set(4, usuarioGlo.split("\\|")[0]);
            //se modifican los registros
            listaDesBit.set(6, String.valueOf(Integer.parseInt(listaDesBit.get(6)) - 1));
            listaDesBit.set(7, String.valueOf(Integer.parseInt(listaDesBit.get(7)) + 1));
            //borramos ambos archivos
            borrarContenidoArchivo(rutaDesBit);
            borrarContenidoArchivo(rutaBit);
            //se vuelven a llenar ambos archivos ahora con los valores modificados
            escribirLista(listaDesBit, rutaDesBit, strError);
            escribirLista(listaBit, rutaBit, strError);
            //ya se modificaron los archivos, ahora hay que devolver a la página principal
            JOptionPane.showMessageDialog(null, "Gracias por habernos preferido, nos vemos!",  "Hasta Luego!", WIDTH);
            new Inicio().setVisible(true);
            setVisible(false);
        }
        else //si no, es por que está en la otra lista
        {
            indice = buscarPorCriterio(listaUs, usuarioGlo.split("\\|")[0]);
            if(indice != -1)
            {
                //cambiamos de 1 a 0
                String[] partesUsuario = usuarioGlo.split("\\|");
                // Cambiar el valor en la posición 9
                partesUsuario[9] = "0";
                // Unir las partes modificadas en una cadena nuevamente
                usuarioGlo = String.join("|", partesUsuario);
                //cambiamos el elemento de la lista
                listaUs.set(indice, usuarioGlo);
                //modificamos el descriptor
                listaDesUs.set(3, String.valueOf(fechaHoraActual.format(forma)));
                listaDesUs.set(4, usuarioGlo.split("\\|")[0]);
                //modificamos los registros
                listaDesUs.set(6, String.valueOf(Integer.parseInt(listaDesUs.get(6)) - 1));
                listaDesUs.set(7, String.valueOf(Integer.parseInt(listaDesUs.get(7)) + 1));
                //borramos ambos archivos
                borrarContenidoArchivo(rutaDesUs);
                borrarContenidoArchivo(rutaUs);
                //se vuelven a llenar ambos archivos ahora con los valores modificados
                escribirLista(listaDesUs, rutaDesUs, strError);
                escribirLista(listaUs, rutaUs, strError);
                //ya se modificaron los archivos, ahora hay que devolver a la página principal
                JOptionPane.showMessageDialog(null, "Gracias por habernos preferido, nos vemos!",  "Hasta Luego!", WIDTH);
                new Inicio().setVisible(true);
                setVisible(false);
            }
        }
        if(indice == -1)
        {
            JOptionPane.showMessageDialog(null, "No se encontró la cuenta a dar de baja, vuelva a intentar",  "Error", WIDTH);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void escribirLista(List<String> lista, String ruta, String strError)
    {
        for (int i = 0; i < lista.size(); i++) 
        {
            LlenarArchivo(ruta, lista.get(i), strError);
        }
    }
    
    public boolean LlenarArchivo(String strPath,String strContenido,String strError)
    {
        File Archivo = new File(strPath);
        
        try
        {
                FileWriter Escribir = new FileWriter(Archivo,true);
                BufferedWriter bw = new BufferedWriter(Escribir);
                bw.write(strContenido+ System.getProperty( "line.separator" ));
                bw.close();
                Escribir.close();
                
                return true;
        }
        catch(IOException ex)
        {
            strError= ex.getMessage();
            return false;
        } 
        
    }
    
    private static boolean borrarContenidoArchivo(String strPath) {
        try {
            // Abre el archivo en modo de escritura sin añadir contenido (append = false)
            FileWriter escribir = new FileWriter(strPath, false);
            escribir.close();
            return true;
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "No",  "non", WIDTH);
            return false;
        }
    }
    
    private static int buscarPorCriterio(List<String> lista, String criterio) 
    {
        for (int i = 0; i < lista.size(); i++) 
        {
            String[] partes = lista.get(i).split("\\|");
            if (partes.length > 0 && partes[0].equals(criterio) && partes[9].equals("1")) 
            {
                return i;
            }
        }
        return -1;  // No se encontró el elemento
    }
    
    public List<String> Obtener(String strPath,String strError)
    {
        //variable tipo archivo (en este caso es un txt)
        File Archivo = new File(strPath);
        //si se encuentra el archivo en la ruta indicada, pasa
        if(Archivo.exists()==true)
        {
            //se crea la lista a enviar
            List<String> ListaPunteo = new ArrayList<>();
            //se crea la variable que nos leerá el archivo
            FileReader LecturaArchivo;
            //try/cacht en caso que el archivo enviado no sea el indicado
            try {
                //se le envía el archivo a leer al lector
                LecturaArchivo = new FileReader(Archivo);
                //búfer de datos
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                //string que me guarda el texto por línea
                String Linea;
                //try/catch en caso que se envíe un archivo que no es el solicitado
                try 
                {
                    //la variable "Linea" adquiere el valor de la primera línea del archivo
                    Linea=LeerArchivo.readLine();
                    //se crea otro string donde se va a almacenar el texto por cada línea del archivo
                    String modeloNum = ""; 
                    //ciclo para leer linea por linea el archivo, mientras que la linea no sea null (no haya llegado al final del archivo), se repetirá el ciclo
                    while(Linea != null)
                    {
                        //si en la línea hay texto, se escribe
                        if(!"".equals(Linea))
                        {
                            //la variable modeloNum, adquiere el valor de lo que está en la línea que se está leyendo
                            modeloNum = Linea;
                        }
                        //se agrega ese modelo a la lista
                        ListaPunteo.add(modeloNum);
                        //pasa a la siguiente línea para que el ciclo continue 
                        Linea=LeerArchivo.readLine();
                    }
                    //se cierra el archivo
                    LecturaArchivo.close();
                    //se termina de leer
                    LeerArchivo.close();
                    //no habrá mensaje de error
                    strError="";
                    //se retorna la lista ya llena
                    return ListaPunteo;
                    
                }
                //catch para mostrar el mensaje de error
                catch (IOException ex) 
                {
                    //mensaje de error
                    strError= ex.getMessage();
                    //la lista se retorna nula
                    return null;
                }
            } 
            //catch para mostrar el mensaje de error
            catch (FileNotFoundException ex) 
            {
                //mensaje de error
                strError= ex.getMessage();
                //la lista se retorna nula
                return null;
            }            
        }
        //si el archivo no se encuentra en la ruta indicada, se muestra un mensaje de error y la lista que se envía estará vacía
        else
        {
            //mensaje de error
            strError="No existe el archivo";
            //lista nula
            return null;
        }
    }
    
    public int comprobar(String strPath,String strError)
    {
        //variable tipo archivo (en este caso es un txt)
        File Archivo = new File(strPath);
        //si se encuentra el archivo en la ruta indicada, pasa
        if(Archivo.exists()==true)
        {
            //se crea la variable que nos leerá el archivo
            FileReader LecturaArchivo;
            //try/cacht en caso que el archivo enviado no sea el indicado
            try {
                //se le envía el archivo a leer al lector
                LecturaArchivo = new FileReader(Archivo);
                //búfer de datos
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                //string que me guarda el texto por línea
                String Linea;
                //try/catch en caso que se envíe un archivo que no es el solicitado
                try 
                {
                    //la variable "Linea" adquiere el valor de la primera línea del archivo
                    Linea=LeerArchivo.readLine();
                    //se crea otro string donde se va a almacenar el texto por cada línea del archivo
                    int contador = 0; 
                    //ciclo para leer linea por linea el archivo, mientras que la linea no sea null (no haya llegado al final del archivo), se repetirá el ciclo
                    while(Linea != null)
                    {
                        //si en la línea hay texto, se escribe
                        if(!"".equals(Linea))
                        {
                            //se cuenta cada línea
                            contador++;
                        }
                        //pasa a la siguiente línea para que el ciclo continue 
                        Linea=LeerArchivo.readLine();
                    }
                    //se cierra el archivo
                    LecturaArchivo.close();
                    //se termina de leer
                    LeerArchivo.close();
                    //no habrá mensaje de error
                    strError="";
                    //se envía la cantidad de objetos que hay
                    return contador;
                }
                //catch para mostrar el mensaje de error
                catch (IOException ex) 
                {
                    //mensaje de error
                    strError= ex.getMessage();
                    //la lista se retorna nula
                    return -1;
                }
            } 
            //catch para mostrar el mensaje de error
            catch (FileNotFoundException ex) 
            {
                //mensaje de error
                strError= ex.getMessage();
                //la lista se retorna nula
                return -1;
            }            
        }
        //si el archivo no se encuentra en la ruta indicada, se muestra un mensaje de error y la lista que se envía estará vacía
        else
        {
            //mensaje de error
            strError="No existe el archivo";
            //lista nula
            return -1;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Perfil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Perfil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Perfil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Perfil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Perfil().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btncerrarsesion;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel labelApellido;
    private javax.swing.JLabel labelCorreo;
    private javax.swing.JLabel labelFecha;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelNum;
    private javax.swing.JLabel labelUsuario;
    // End of variables declaration//GEN-END:variables
}

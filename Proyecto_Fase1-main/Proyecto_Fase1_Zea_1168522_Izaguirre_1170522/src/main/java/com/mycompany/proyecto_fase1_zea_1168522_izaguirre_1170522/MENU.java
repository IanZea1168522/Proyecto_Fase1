/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyecto_fase1_zea_1168522_izaguirre_1170522;

import static java.awt.image.ImageObserver.WIDTH;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Mario
 */
public class MENU extends javax.swing.JFrame {

    /**
     * Creates new form MENU
     */
    String usuarioGlo;
    
    public MENU() {
        initComponents();
    }

    public MENU(String usuario)
    {
        initComponents();
        //se escribe en pantalla
        labelUsuario.setText("Usuario: " + usuario.split("\\|")[0]);
        labelNombre.setText("Nombre: " + usuario.split("\\|")[1]);
        labelApellido.setText("Apellido: " + usuario.split("\\|")[2]);
        labelFecha.setText("Nació el: " + usuario.split("\\|")[5]);
        labelCorreo.setText("Correo: " + usuario.split("\\|")[6]);
        labelNum.setText("Teléfono: " + usuario.split("\\|")[7]);
        //se guarda el usuario
        usuarioGlo = usuario;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        labelUsuario = new javax.swing.JLabel();
        labelApellido = new javax.swing.JLabel();
        labelNombre = new javax.swing.JLabel();
        labelFecha = new javax.swing.JLabel();
        labelCorreo = new javax.swing.JLabel();
        labelNum = new javax.swing.JLabel();
        btncerrarsesion = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textBoxContraseña = new javax.swing.JTextPane();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        textBoxCorreo = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        textBoxUsuario = new javax.swing.JTextPane();
        labelEstado = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        textBoxTelefono = new javax.swing.JTextPane();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        botonListo = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textBoxNombre = new javax.swing.JTextPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        textBoxRutaFoto = new javax.swing.JTextPane();
        botonFoto = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        textBoxApellido = new javax.swing.JTextPane();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        textBoxFecha = new javax.swing.JTextPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        btnborrarusuario = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        txtborrarusuario = new javax.swing.JTextPane();
        jLabel19 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        btnhaceradmin = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        txtadminusuario = new javax.swing.JTextPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        textBoxBackup = new javax.swing.JTextPane();
        btnexaminarbackup = new javax.swing.JButton();
        btnbackup = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel1.setText("PAGINA PRINCIPAL:");

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 607, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 430, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(153, 153, 153));

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel3.setFont(new java.awt.Font("Gadugi", 0, 24)); // NOI18N
        jLabel3.setText("PAGINA PRINCIPAL:");

        labelUsuario.setFont(new java.awt.Font("Gadugi", 0, 18)); // NOI18N
        labelUsuario.setText("Usuario:");

        labelApellido.setFont(new java.awt.Font("Gadugi", 0, 18)); // NOI18N
        labelApellido.setText("Apellido:");

        labelNombre.setFont(new java.awt.Font("Gadugi", 0, 18)); // NOI18N
        labelNombre.setText("Nombre: ");

        labelFecha.setFont(new java.awt.Font("Gadugi", 0, 18)); // NOI18N
        labelFecha.setText("Fecha de Nacimiento: ");

        labelCorreo.setFont(new java.awt.Font("Gadugi", 0, 18)); // NOI18N
        labelCorreo.setText("Correo: ");

        labelNum.setFont(new java.awt.Font("Gadugi", 0, 18)); // NOI18N
        labelNum.setText("Número de teléfono: ");

        btncerrarsesion.setBackground(new java.awt.Color(153, 204, 255));
        btncerrarsesion.setFont(new java.awt.Font("Gadugi", 0, 14)); // NOI18N
        btncerrarsesion.setForeground(new java.awt.Color(0, 0, 0));
        btncerrarsesion.setText("Cerrar Sesión");
        btncerrarsesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncerrarsesionActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(153, 204, 255));
        jButton1.setFont(new java.awt.Font("Gadugi", 0, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setText("Borrar Cuenta");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelApellido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelNombre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelCorreo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(labelUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelNum, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btncerrarsesion, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelUsuario)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(labelNombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelApellido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelFecha)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelCorreo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelNum))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btncerrarsesion, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Menu Principal", jPanel1);

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));

        jScrollPane4.setViewportView(textBoxContraseña);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("Para registrarte, necesitamos que llenes todos los campos y que no dejes ninguno vacío");

        jLabel10.setText("eMail: (no te excedas de los 40 caracteres)");

        jLabel11.setText("Usuario: (no te excedas de los 20 caracteres");

        jLabel12.setText("Contraseña: (no te excedas de los 40 caracteres)");

        jScrollPane8.setViewportView(textBoxCorreo);

        jScrollPane1.setViewportView(textBoxUsuario);

        labelEstado.setText("Estado: en proceso");

        jScrollPane5.setViewportView(textBoxTelefono);

        jLabel13.setText("Teléfono");

        jLabel14.setText("Nombre: (no te excedas de los 30 caracteres");

        botonListo.setBackground(new java.awt.Color(153, 204, 255));
        botonListo.setFont(new java.awt.Font("Gadugi", 0, 14)); // NOI18N
        botonListo.setText("¡Listo!");
        botonListo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonListoActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(textBoxNombre);

        textBoxRutaFoto.setEnabled(false);
        jScrollPane6.setViewportView(textBoxRutaFoto);

        botonFoto.setBackground(new java.awt.Color(153, 204, 255));
        botonFoto.setFont(new java.awt.Font("Gadugi", 0, 14)); // NOI18N
        botonFoto.setText("Examinar...");
        botonFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonFotoActionPerformed(evt);
            }
        });

        jLabel15.setText("Apellido: (no te excedas de los 30 caracteres)");

        jLabel16.setText("Fecha de nacimiento: (d/m/a)");

        jScrollPane3.setViewportView(textBoxApellido);

        jLabel17.setText("Foto de perfil");

        jScrollPane7.setViewportView(textBoxFecha);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel11)
                                .addComponent(jScrollPane1))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(41, 41, 41)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(botonListo, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(98, 98, 98))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelEstado)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botonListo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botonFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Crear Usuario", jPanel2);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));

        jLabel18.setFont(new java.awt.Font("Gadugi", 0, 18)); // NOI18N
        jLabel18.setText("Busca el usuario que deseas dar de baja.");

        btnborrarusuario.setBackground(new java.awt.Color(153, 204, 255));
        btnborrarusuario.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnborrarusuario.setText("Borrar Usuario");
        btnborrarusuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnborrarusuarioActionPerformed(evt);
            }
        });

        jScrollPane9.setViewportView(txtborrarusuario);

        jLabel19.setFont(new java.awt.Font("Gadugi", 0, 18)); // NOI18N
        jLabel19.setText("Buscar Usuario");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnborrarusuario, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(87, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addGap(57, 57, 57)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnborrarusuario, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(145, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Borrar Usuario", jPanel3);

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));

        jLabel20.setFont(new java.awt.Font("Gadugi", 0, 18)); // NOI18N
        jLabel20.setText("Buscar Usuario");

        btnhaceradmin.setBackground(new java.awt.Color(153, 204, 255));
        btnhaceradmin.setFont(new java.awt.Font("Gadugi", 0, 18)); // NOI18N
        btnhaceradmin.setText("Hacer admin");
        btnhaceradmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhaceradminActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Gadugi", 0, 18)); // NOI18N
        jLabel21.setText("Busca el usuario que desea hacer admin");

        jScrollPane10.setViewportView(txtadminusuario);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(203, 203, 203))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(btnhaceradmin, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addGap(66, 66, 66)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnhaceradmin, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Admin", jPanel5);

        jPanel6.setBackground(new java.awt.Color(153, 153, 153));

        textBoxBackup.setEnabled(false);
        jScrollPane11.setViewportView(textBoxBackup);

        btnexaminarbackup.setBackground(new java.awt.Color(153, 204, 255));
        btnexaminarbackup.setText("Examinar...");
        btnexaminarbackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnexaminarbackupActionPerformed(evt);
            }
        });

        btnbackup.setBackground(new java.awt.Color(153, 204, 255));
        btnbackup.setText("BACKUP");
        btnbackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbackupActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel22.setText("Para hacer una copia de seguridad presione el boton \"examinar\" y busque donde quiere la copia");

        jLabel23.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel23.setText("despues presiones al botono \"BACKUP\" y se guardara la copia");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(184, 184, 184)
                                .addComponent(btnbackup, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(btnexaminarbackup, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel23)
                .addGap(55, 55, 55)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnexaminarbackup, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(btnbackup, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(137, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Backup", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btncerrarsesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncerrarsesionActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Gracias por usar nuestra red! vuelva pronto",  "Gracias!", WIDTH);
        new Inicio().setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btncerrarsesionActionPerformed

    private void botonListoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonListoActionPerformed
        // TODO add your handling code here:
        try //try catch en caso de error
        {
            //se obtienen todos los textos de las text boxes
            String usuario = textBoxUsuario.getText();
            String nombre = textBoxNombre.getText();
            String apellido = textBoxApellido.getText();
            String contraseña = textBoxContraseña.getText();
            // Define el formato esperado
            DateTimeFormatter formato = DateTimeFormatter.ofPattern("d/M/yyyy");
            // Intenta convertir la cadena a LocalDateTime
            LocalDate fecha = LocalDate.parse(textBoxFecha.getText(), formato);
            String eMail = textBoxCorreo.getText();
            int telefono = -1;
            telefono = Integer.parseInt(textBoxTelefono.getText().trim());
            //se obtiene la ruta de la foto
            String ruta = textBoxRutaFoto.getText();
            //se comprueba si en los textboxes no hay ningún "|"
            if(textBoxUsuario.getText().contains("|") || textBoxNombre.getText().contains("|") || textBoxApellido.getText().contains("|") || textBoxContraseña.getText().contains("|") || textBoxFecha.getText().contains("|") || textBoxCorreo.getText().contains("|") || textBoxTelefono.getText().contains("|") || textBoxRutaFoto.getText().contains("|"))
            {
                throw new Exception("El string contiene el carácter '|'");
            }
            //se comprueba primero que ningún campo esté vacío
            if(usuario.isEmpty() || nombre.isEmpty() || apellido.isEmpty() || contraseña.isEmpty() || telefono < 0 || eMail.isEmpty() || telefono < 1 || fecha == null)
            {
                JOptionPane.showMessageDialog(null, "Por favor llene todos los campos antes de continuar",  "Error", WIDTH);
            }
            else
            {
                //todos los campos están correctamente llenos, se comprueba la seguridad de la contraseña
                //ruta de mi txt de puntuacion
                String rutaPuntuacion = "C:\\MEIA\\puntuacion.txt";
                //ruta de mi txt de resultados
                String rutaResultado = "C:\\MEIA\\resultado.txt";
                //lista de los punteos del tzt
                List<String> listaPunts = new ArrayList<>();
                //lista de los resultados del txt
                List<String> listaRes = new ArrayList<>();
                //mensaje de error
                String strError="";
                //se llena la lista leyendo el archivo (con el método creado)
                listaPunts = Obtener(rutaPuntuacion, strError);
                //se llena la otra lista leyendo el otro archivo (con el método creado)
                listaRes = Obtener(rutaResultado, strError);
                //si las listas no están vacías/son nulls se continúa el código
                if((listaPunts.size() > 0 && listaPunts != null) || (listaRes.size() > 0 && listaRes != null))
                {
                    //se comprueba si el tamaño de la entrada es menor al primer elemento de la lista 
                    if(contraseña.length() < Integer.parseInt(listaPunts.get(0)))
                    {
                        //es menor a 6 caracteres, se indica que tienen que ser mínimo 6, que es el número en la primera posición del archivo de texto
                        JOptionPane.showMessageDialog(null, "El mínimo de caracteres es 6, vuelva a intentarlo", "Error", WIDTH);
                    }
                    else
                    {
                        //variable que guarde la puntuación
                        int puntuacion = 0;
                        //se obtiene la puntuación
                        puntuacion = punt(contraseña, listaPunts);
                        //variable que guarda el resultado
                        String resul = ""; 
                        //se obtiene en que rango está
                        if(puntuacion <= Integer.parseInt(listaRes.get(0).split(",")[1]))
                        {
                            //se indica que es insegura
                            resul = "Contraseña insegura";
                            labelEstado.setText("Estado: " + resul);
                        }
                        if(puntuacion <= Integer.parseInt(listaRes.get(1).split(",")[1]))
                        {
                            //se indica que es poca segura
                            resul = "Contraseña poco segura";
                            labelEstado.setText("Estado: " + resul);
                        }
                        else if(puntuacion <= Integer.parseInt(listaRes.get(2).split(",")[1]))
                        {
                            //se indica que es segura
                            resul = "Contraseña segura";
                            labelEstado.setText("Estado: " + resul);
                        }
                        else if(puntuacion >= Integer.parseInt(listaRes.get(3).split(",")[0]))
                        {
                            //se indica que es muy segura
                            resul = "Contraseña muy segura";
                            labelEstado.setText("Estado: " + resul);
                        }
                        //si su contraseña es insegura o poco segura, pedir que se vuelva a ingresar, de lo contrario, puede continuar
                        if(resul.equals("Contraseña insegura") || resul.equals("Contraseña poco segura"))
                        {
                            //indicar que cambie de contraseña
                            JOptionPane.showMessageDialog(null, "La contraseña no es lo suficientemente segura, intente oon otra ",  "Error", WIDTH);
                        }
                        else
                        {
                            //la última prueba es verificar que ningún campo se exeda del límite
                            if(usuario.length() > 20 || nombre.length() > 30 || apellido.length() > 30 || contraseña.length() > 40 || eMail.length() > 40)
                            {
                                //si es mas grande que el solicitado, se muestra mensaje de error para que lo intente de nuevo
                                JOptionPane.showMessageDialog(null, "Alguno de los campos excede el número máximo de caracteres, vuelva a intentarlo",  "Error", WIDTH);
                            }
                            else
                            {
                                //se crea el string que guarde ya todo el objeto, primero creando el int que guarde el rol
                                int rol = 0;
                                //se comprueba su rol
                                String rutaBit = "C:\\MEIA\\Bitacora.txt";
                                String rutaUs = "C:\\MEIA\\Usuario.txt";
                                String rutaDesBit = "C:\\MEIA\\Desc_Bitacora.txt";
                                String rutaDesUs = "C:\\MEIA\\Desc_Usuario.txt";
                                if(comprobar(rutaBit, strError) == 0 && comprobar(rutaUs, strError) == 0)
                                {
                                    rol = 1;
                                }
                                //se crea el string
                                String todo = usuario + "|" + nombre + "|" + apellido + "|" + contraseña + "|" + rol + "|" + fecha + "|" + eMail + "|" + telefono + "|" + ruta + "|" + "1";
                                //se obtienen los datos tanto de la bitacora como del archivo de usuarios (y sus respectivos descriptores)
                                List<String> listaBit = new ArrayList<>();
                                List<String> listaUs = new ArrayList<>();
                                List<String> listaDesBit = new ArrayList<>();
                                List<String> listaDesUs = new ArrayList<>();
                                if(comprobar(rutaBit, strError) > 0)
                                {
                                    listaBit = Obtener(rutaBit, strError);
                                }
                                if(comprobar(rutaUs, strError) > 0)
                                {
                                    listaUs = Obtener(rutaUs, strError);
                                }
                                //se comprueba si el usuario ya existe
                                boolean existe = false;
                                List<String> plantilla = new ArrayList<>();
                                for (int i = 0; i < listaUs.size(); i++) 
                                {
                                    //si el usuario ingresado es igual a cualquiera de los que están en el archivo
                                    if((usuario.equals(listaUs.get(i).split("\\|")[0])) && listaUs.get(i).split("\\|")[9].equals("1"))
                                    {
                                        //si es así el bool pasa a ser verdadero
                                        existe = true;
                                        plantilla = listaUs;
                                        //así mismo, se termina el ciclo
                                        break;
                                    }
                                }
                                if(!existe)
                                {
                                    for (int i = 0; i < listaBit.size(); i++) 
                                    {
                                        //si el usuario ingresado es igual a cualquiera de los que están en el archivo
                                        if((usuario.equals(listaBit.get(i).split("\\|")[0])) && listaBit.get(i).split("\\|")[9].equals("1"))
                                        {
                                            //si es así se guarda la posición, que nos servirá para la parte de las contraseñas, y el bool pasa a ser verdadero
                                            existe = true;
                                            plantilla = listaBit;
                                            //así mismo, se termina el ciclo
                                            break;
                                        }
                                    }   
                                }
                                if(existe)
                                {
                                    JOptionPane.showMessageDialog(null, "El usuario parece que ya existe, pruebe con otro",  "Error", WIDTH);
                                }
                                else
                                {
                                    //se obtiene la informacion de los descriptores
                                    listaDesBit = Obtener(rutaDesBit, strError);
                                    listaDesUs = Obtener(rutaDesUs, strError);
                                    // Obtener la fecha y hora actual una sola vez
                                    LocalDateTime fechaHoraActual = LocalDateTime.now();
                                    DateTimeFormatter forma = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
                                    //se comprueba si se puede escribir
                                    if(listaBit.size() >= Integer.parseInt(listaDesUs.get(8)))
                                    {
                                        //borramos el contenido de los archivos (lo que estaba escrito está en la lista, por lo que no lo perdemos)
                                        borrarContenidoArchivo(rutaBit);
                                        borrarContenidoArchivo(rutaUs);
                                        //agregamos los elementos que estén activos a la lista de usuarios
                                        for (int i = 0; i < listaBit.size(); i++) 
                                        {
                                            //se comprueba si está activo o no
                                            if(listaBit.get(i).split("\\|")[9].equals("1"))
                                            {
                                                //si es que sí, se agrega a la lista
                                                listaUs.add(listaBit.get(i));
                                            }
                                        }
                                        // Definir un comparador personalizado
                                        Comparator<String> comparador = Comparator.comparing(s -> s.split("\\|")[0], String.CASE_INSENSITIVE_ORDER);
                                        // Ordenar la lista utilizando el comparador
                                        Collections.sort(listaUs, comparador);
                                        //se llena el archivo ahora con los nuevos datos
                                        for (int j = 0; j < listaUs.size(); j++) 
                                        {
                                            if(listaUs.get(j).split("\\|")[9].equals("1"))
                                            {
                                                LlenarArchivo(rutaUs, listaUs.get(j), strError);
                                            }
                                        }
                                        //se comprueba si fue la primera vez que se modificó el archivo, si es así se modifican todos los parámetros, si no solo se cambian los de "modificacion"
                                        if (listaDesUs.get(1).equals("-") && listaDesUs.get(2).equals("-")) 
                                        {
                                            // Asignar valores si las posiciones 1 y 2 son "-"
                                            listaDesUs.set(1, fechaHoraActual.format(forma));
                                            listaDesUs.set(2, usuarioGlo.split("\\|")[0]);
                                        }
                                        // Asignar valores para las posiciones 3 y 4
                                        listaDesUs.set(3, fechaHoraActual.format(forma));
                                        listaDesUs.set(4, usuarioGlo.split("\\|")[0]);
                                        // Asignar valores para las posiciones 5, 6 y 7
                                        listaDesUs.set(5, String.valueOf(comprobar(rutaUs, strError)));
                                        listaDesUs.set(6, String.valueOf(comprobar(rutaUs, strError)));
                                        listaDesUs.set(7, "0");
                                        // Borrar el archivo descriptor
                                        borrarContenidoArchivo(rutaDesUs);
                                        // Llenar el archivo con los nuevos valores
                                        for (int j = 0; j < listaDesUs.size(); j++) 
                                        {
                                            LlenarArchivo(rutaDesUs, listaDesUs.get(j), strError);
                                        }
                                        //limpiamos la lista de la bitacora, por que en ella ya no hay nada
                                        listaBit.clear();
                                    }
                                    //ahora que se sabe que se puede escribir en la bitacora, se agrega la cadena a la lista de la bitacora
                                    listaBit.add(todo);
                                    //se borra el contenido de la bitacora para que sea reescrito
                                    borrarContenidoArchivo(rutaBit);
                                    //se reescribe la bitacora ahora con el elemento agregado
                                    for (int i = 0; i < listaBit.size(); i++) 
                                    {
                                        LlenarArchivo(rutaBit, listaBit.get(i), strError);
                                    }
                                    //por último modificamos los valores del descriptor de bitacora
                                    borrarContenidoArchivo(rutaDesBit);
                                    //se comprueba si ya se había modificado antes o no
                                    if (listaDesBit.get(1).equals("-") && listaDesBit.get(2).equals("-")) 
                                    {
                                        // Asignar valores si las posiciones 1 y 2 son "-"
                                        listaDesBit.set(1, fechaHoraActual.format(forma));
                                        listaDesBit.set(2, usuarioGlo.split("\\|")[0]);
                                    }
                                    // Asignar valores para las posiciones 3 y 4
                                    listaDesBit.set(3, fechaHoraActual.format(forma));
                                    listaDesBit.set(4, usuarioGlo.split("\\|")[0]);
                                    //ahora para la 5
                                    listaDesBit.set(5, String.valueOf(listaBit.size()));
                                    //para la 6 se cuenta cuantos usuarios activos hay, y eso será lo que se agregue a esa posición
                                    int contarActivo = 0;
                                    //ciclo para ir contando los usuarios activos
                                    for(String elemento : listaBit)
                                    {
                                        //se divide el elemento por "|"
                                        String[] partes = elemento.split("\\|");
                                        //si en la posición 9 hay un 1, se cuenta
                                        if (partes.length >= 10 && "1".equals(partes[9])) 
                                        {
                                            contarActivo++;
                                        }
                                    }
                                    //ahora en la posición 6 ya se pone cuantos activos habían
                                    listaDesBit.set(6, String.valueOf(contarActivo));
                                    //por ultimo los inactivos, que son la diferencia entre el todal y los activos
                                    listaDesBit.set(7, String.valueOf((listaBit.size() - contarActivo)));
                                    //por último se llena el archivo de nuevo
                                    for (int i = 0; i < listaDesBit.size(); i++) 
                                    {
                                        LlenarArchivo(rutaDesBit, listaDesBit.get(i), strError);
                                    }
                                    //por último indicamos que el usuario fue creado y que puede ingresar con sus credenciales creadas
                                    JOptionPane.showMessageDialog(null, "Listo, ha podido crear la cuenta con exito",  "Finalizado", WIDTH);
                                    //se reinician las textBoxes
                                    textBoxNombre.setText("");
                                    textBoxUsuario.setText("");
                                    textBoxApellido.setText("");
                                    textBoxContraseña.setText("");
                                    textBoxFecha.setText("");
                                    textBoxCorreo.setText("");
                                    textBoxTelefono.setText("");
                                    textBoxRutaFoto.setText("");
                                }
                            }
                        }
                    }
                }
            }
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, "Datos ingresados errómeos, vulve a intentarlo",  "Error", WIDTH);
        }
    }//GEN-LAST:event_botonListoActionPerformed

    private void botonFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonFotoActionPerformed
        // TODO add your handling code here:
        JFileChooser dialogo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Imágenes (*.jpg, *.png)", "jpg", "png");
        File ficheroImagen;
        String rutaArchivo;
        dialogo.setFileFilter(filtro);

        int valor = dialogo.showOpenDialog(this);
        if (valor == JFileChooser.APPROVE_OPTION) {
            ficheroImagen = dialogo.getSelectedFile();
            rutaArchivo = ficheroImagen.getPath();
            // Verificar que el archivo existe y tiene una extensión permitida
            if (ficheroImagen.exists() && (rutaArchivo.endsWith(".jpg") || rutaArchivo.endsWith(".png"))) {
                textBoxRutaFoto.setText(rutaArchivo);
            } else {
                // Mostrar un mensaje de error si el archivo no cumple con los requisitos
                JOptionPane.showMessageDialog(this, "Seleccione un archivo válido (.jpg o .png)", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_botonFotoActionPerformed

    private void btnborrarusuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnborrarusuarioActionPerformed
        // TODO add your handling code here:
        //se obtiene el usuario a borrar
        String elim = txtborrarusuario.getText();
        //en caso de error
        String strError = "";
        //se obtienen las 4 listas, la de bitacora, su descriptor, la de usuarios y su descriptor
        String rutaUs = "C:\\MEIA\\Usuario.txt";
        String rutaBit = "C:\\MEIA\\Bitacora.txt";
        String rutaDesUs = "C:\\MEIA\\Desc_Usuario.txt";
        String rutaDesBit = "C:\\MEIA\\Desc_Bitacora.txt";
        //creamos las listas
        List<String> listaBit = new ArrayList<>();
        List<String> listaUs = new ArrayList<>();
        List<String> listaDesBit = new ArrayList<>();
        List<String> listaDesUs = new ArrayList<>();
        //se llenan
        if(comprobar(rutaBit, strError) > 0)
        {
            listaBit = Obtener(rutaBit, strError);
        }
        if(comprobar(rutaUs, strError) > 0)
        {
            listaUs = Obtener(rutaUs, strError);
        }
        listaDesBit = Obtener(rutaDesBit, strError);
        listaDesUs = Obtener(rutaDesUs, strError);
        //obtenemos la fecha del día de hoy
        LocalDateTime fechaHoraActual = LocalDateTime.now();
        DateTimeFormatter forma = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        //indice de donde se encuentra la cuenta a borrar
        int indice = -1;
        indice = buscarPorCriterio(listaBit, elim);
        //si se encontró en la primera lista, se hace el cambio
        if(indice != -1)
        {
            //cambiamos de 1 a 0
            String[] partesUsuario = listaBit.get(indice).split("\\|");
            // Cambiar el valor en la posición 9
            partesUsuario[9] = "0";
            // Unir las partes modificadas en una cadena nuevamente
            listaBit.set(indice, String.join("|", partesUsuario));
            //modificamos el descriptor
            listaDesBit.set(3, String.valueOf(fechaHoraActual.format(forma)));
            listaDesBit.set(4, usuarioGlo.split("\\|")[0]);
            //se modifican los registros
            listaDesBit.set(6, String.valueOf(Integer.parseInt(listaDesBit.get(6)) - 1));
            listaDesBit.set(7, String.valueOf(Integer.parseInt(listaDesBit.get(7)) + 1));
            //borramos ambos archivos
            borrarContenidoArchivo(rutaDesBit);
            borrarContenidoArchivo(rutaBit);
            //se vuelven a llenar ambos archivos ahora con los valores modificados
            escribirLista(listaDesBit, rutaDesBit, strError);
            escribirLista(listaBit, rutaBit, strError);
        }
        else //si no, es por que está en la otra lista
        {
            indice = buscarPorCriterio(listaUs, elim);
            if(indice != -1)
            {
                //cambiamos de 1 a 0
                String[] partesUsuario = listaUs.get(indice).split("\\|");
                // Cambiar el valor en la posición 9
                partesUsuario[9] = "0";
                // Unir las partes modificadas en una cadena nuevamente
                listaUs.set(indice, String.join("|", partesUsuario));
                //modificamos el descriptor
                listaDesUs.set(3, String.valueOf(fechaHoraActual.format(forma)));
                listaDesUs.set(4, usuarioGlo.split("\\|")[0]);
                //modificamos los registros
                listaDesUs.set(6, String.valueOf(Integer.parseInt(listaDesUs.get(6)) - 1));
                listaDesUs.set(7, String.valueOf(Integer.parseInt(listaDesUs.get(7)) + 1));
                //borramos ambos archivos
                borrarContenidoArchivo(rutaDesUs);
                borrarContenidoArchivo(rutaUs);
                //se vuelven a llenar ambos archivos ahora con los valores modificados
                escribirLista(listaDesUs, rutaDesUs, strError);
                escribirLista(listaUs, rutaUs, strError);
                //ya se modificaron los archivos, ahora hay que devolver a la página principal si es que se eliminó a si mismo
            }
        }
        if(usuarioGlo.split("\\|")[0].equals(elim))
        {
            JOptionPane.showMessageDialog(null, "Gracias por habernos preferido, nos vemos!",  "Hasta Luego!", WIDTH);
            new Inicio().setVisible(true);
            setVisible(false);
        }
        else if(!usuarioGlo.split("\\|")[0].equals(elim) && indice != -1) //si eliminó a otro pues no hace falta sacarlo
        {
            JOptionPane.showMessageDialog(null, "La cuenta fue desactivada con éxito",  "Listo", WIDTH);
            txtborrarusuario.setText("");
        }
        if(indice == -1)
        {
            JOptionPane.showMessageDialog(null, "No se encontró la cuenta a dar de baja, vuelva a intentar",  "Error", WIDTH);
        }
    }//GEN-LAST:event_btnborrarusuarioActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String strError = "";
        //se obtienen las 4 listas, la de bitacora, su descriptor, la de usuarios y su descriptor
        String rutaUs = "C:\\MEIA\\Usuario.txt";
        String rutaBit = "C:\\MEIA\\Bitacora.txt";
        String rutaDesUs = "C:\\MEIA\\Desc_Usuario.txt";
        String rutaDesBit = "C:\\MEIA\\Desc_Bitacora.txt";
        //creamos las listas
        List<String> listaBit = new ArrayList<>();
        List<String> listaUs = new ArrayList<>();
        List<String> listaDesBit = new ArrayList<>();
        List<String> listaDesUs = new ArrayList<>();
        //se llenan
        if(comprobar(rutaBit, strError) > 0)
        {
            listaBit = Obtener(rutaBit, strError);
        }
        if(comprobar(rutaUs, strError) > 0)
        {
            listaUs = Obtener(rutaUs, strError);
        }
        listaDesBit = Obtener(rutaDesBit, strError);
        listaDesUs = Obtener(rutaDesUs, strError);
        //obtenemos la fecha del día de hoy
        LocalDateTime fechaHoraActual = LocalDateTime.now();
        DateTimeFormatter forma = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        //indice de donde se encuentra la cuenta a borrar
        int indice = -1;
        indice = buscarPorCriterio(listaBit, usuarioGlo.split("\\|")[0]);
        //si se encontró en la primera lista, se hace el cambio
        if(indice != -1)
        {
            //cambiamos de 1 a 0
            String[] partesUsuario = usuarioGlo.split("\\|");
            // Cambiar el valor en la posición 9
            partesUsuario[9] = "0";
            // Unir las partes modificadas en una cadena nuevamente
            usuarioGlo = String.join("|", partesUsuario);
            //cambiamos el elemento de la lista
            listaBit.set(indice, usuarioGlo);
            //modificamos el descriptor
            listaDesBit.set(3, String.valueOf(fechaHoraActual.format(forma)));
            listaDesBit.set(4, usuarioGlo.split("\\|")[0]);
            //se modifican los registros
            listaDesBit.set(6, String.valueOf(Integer.parseInt(listaDesBit.get(6)) - 1));
            listaDesBit.set(7, String.valueOf(Integer.parseInt(listaDesBit.get(7)) + 1));
            //borramos ambos archivos
            borrarContenidoArchivo(rutaDesBit);
            borrarContenidoArchivo(rutaBit);
            //se vuelven a llenar ambos archivos ahora con los valores modificados
            escribirLista(listaDesBit, rutaDesBit, strError);
            escribirLista(listaBit, rutaBit, strError);
            //ya se modificaron los archivos, ahora hay que devolver a la página principal
            new Inicio().setVisible(true);
            setVisible(false);
        }
        else //si no, es por que está en la otra lista
        {
            indice = buscarPorCriterio(listaUs, usuarioGlo.split("\\|")[0]);
            if(indice != -1)
            {
                //cambiamos de 1 a 0
                String[] partesUsuario = usuarioGlo.split("\\|");
                // Cambiar el valor en la posición 9
                partesUsuario[9] = "0";
                // Unir las partes modificadas en una cadena nuevamente
                usuarioGlo = String.join("|", partesUsuario);
                //cambiamos el elemento de la lista
                listaUs.set(indice, usuarioGlo);
                //modificamos el descriptor
                listaDesUs.set(3, String.valueOf(fechaHoraActual.format(forma)));
                listaDesUs.set(4, usuarioGlo.split("\\|")[0]);
                //modificamos los registros
                listaDesUs.set(6, String.valueOf(Integer.parseInt(listaDesUs.get(6)) - 1));
                listaDesUs.set(7, String.valueOf(Integer.parseInt(listaDesUs.get(7)) + 1));
                //borramos ambos archivos
                borrarContenidoArchivo(rutaDesUs);
                borrarContenidoArchivo(rutaUs);
                //se vuelven a llenar ambos archivos ahora con los valores modificados
                escribirLista(listaDesUs, rutaDesUs, strError);
                escribirLista(listaUs, rutaUs, strError);
                //ya se modificaron los archivos, ahora hay que devolver a la página principal
                JOptionPane.showMessageDialog(null, "Gracias por habernos preferido, nos vemos!",  "Hasta Luego!", WIDTH);
                new Inicio().setVisible(true);
                setVisible(false);
            }
        }
        if(indice == -1)
        {
            JOptionPane.showMessageDialog(null, "No se encontró la cuenta a dar de baja, vuelva a intentar",  "Error", WIDTH);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnhaceradminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhaceradminActionPerformed
        // TODO add your handling code here:
        //se obtiene el usuario a borrar
        String admin = txtadminusuario.getText();
        //en caso de error
        String strError = "";
        //se obtienen las 4 listas, la de bitacora, su descriptor, la de usuarios y su descriptor
        String rutaUs = "C:\\MEIA\\Usuario.txt";
        String rutaBit = "C:\\MEIA\\Bitacora.txt";
        String rutaDesUs = "C:\\MEIA\\Desc_Usuario.txt";
        String rutaDesBit = "C:\\MEIA\\Desc_Bitacora.txt";
        //creamos las listas
        List<String> listaBit = new ArrayList<>();
        List<String> listaUs = new ArrayList<>();
        List<String> listaDesBit = new ArrayList<>();
        List<String> listaDesUs = new ArrayList<>();
        //se llenan
        if(comprobar(rutaBit, strError) > 0)
        {
            listaBit = Obtener(rutaBit, strError);
        }
        if(comprobar(rutaUs, strError) > 0)
        {
            listaUs = Obtener(rutaUs, strError);
        }
        listaDesBit = Obtener(rutaDesBit, strError);
        listaDesUs = Obtener(rutaDesUs, strError);
        //obtenemos la fecha del día de hoy
        LocalDateTime fechaHoraActual = LocalDateTime.now();
        DateTimeFormatter forma = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        //indice de donde se encuentra la cuenta a borrar
        int indice = -1;
        indice = buscarPorCriterio(listaBit, admin);
        //si se encontró en la primera lista, se hace el cambio
        if(indice != -1)
        {
            //cambiamos de 0 a 1
            String[] partesUsuario = listaBit.get(indice).split("\\|");
            // Cambiar el valor en la posición 9
            partesUsuario[4] = "1";
            // Unir las partes modificadas en una cadena nuevamente
            listaBit.set(indice, String.join("|", partesUsuario));
            //modificamos el descriptor
            listaDesBit.set(3, String.valueOf(fechaHoraActual.format(forma)));
            listaDesBit.set(4, usuarioGlo.split("\\|")[0]);
            //borramos ambos archivos
            borrarContenidoArchivo(rutaDesBit);
            borrarContenidoArchivo(rutaBit);
            //se vuelven a llenar ambos archivos ahora con los valores modificados
            escribirLista(listaDesBit, rutaDesBit, strError);
            escribirLista(listaBit, rutaBit, strError);
        }
        else //si no, es por que está en la otra lista
        {
            indice = buscarPorCriterio(listaUs, admin);
            if(indice != -1)
            {
                //cambiamos de 1 a 0
                String[] partesUsuario = listaUs.get(indice).split("\\|");
                // Cambiar el valor en la posición 9
                partesUsuario[4] = "1";
                // Unir las partes modificadas en una cadena nuevamente
                listaUs.set(indice, String.join("|", partesUsuario));
                //modificamos el descriptor
                listaDesUs.set(3, String.valueOf(fechaHoraActual.format(forma)));
                listaDesUs.set(4, usuarioGlo.split("\\|")[0]);
                //borramos ambos archivos
                borrarContenidoArchivo(rutaDesUs);
                borrarContenidoArchivo(rutaUs);
                //se vuelven a llenar ambos archivos ahora con los valores modificados
                escribirLista(listaDesUs, rutaDesUs, strError);
                escribirLista(listaUs, rutaUs, strError);
                //ya se modificaron los archivos, ahora hay que devolver a la página principal si es que se eliminó a si mismo
            }
        }
        if(usuarioGlo.split("\\|")[0].equals(admin))
        {
            JOptionPane.showMessageDialog(null, "Usted ya era administrador",  "Alto", WIDTH);
            new Inicio().setVisible(true);
            setVisible(false);
        }
        else if(!usuarioGlo.split("\\|")[0].equals(admin) && indice != -1) //si eliminó a otro pues no hace falta sacarlo
        {
            JOptionPane.showMessageDialog(null, "Ahora " + admin + " es administrador también",  "Listo", WIDTH);
            txtadminusuario.setText("");
        }
        if(indice == -1)
        {
            JOptionPane.showMessageDialog(null, "No se encontró la cuenta a dar de baja, vuelva a intentar",  "Error", WIDTH);
        }
    }//GEN-LAST:event_btnhaceradminActionPerformed

    private void btnexaminarbackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnexaminarbackupActionPerformed
        // TODO add your handling code here:
        JFileChooser dialogo = new JFileChooser();
        dialogo.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); // Solo permitir la selección de directorios

        int valor = dialogo.showOpenDialog(this);
        if (valor == JFileChooser.APPROVE_OPTION) {
            File directorio = dialogo.getSelectedFile();
            String rutaDirectorio = directorio.getAbsolutePath();
            // Verificar que es un directorio válido
            if (directorio.isDirectory()) {
                textBoxBackup.setText(rutaDirectorio);
            } else {
                // Mostrar un mensaje de error si no se selecciona un directorio válido
                JOptionPane.showMessageDialog(this, "Seleccione un directorio válido", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnexaminarbackupActionPerformed

    private void btnbackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbackupActionPerformed
        // TODO add your handling code here:
        //obtenemos las rutas que nos interesan para hacer backup
        String strError = "";
        String rutaUs = "C:\\MEIA\\Usuario.txt";
        String rutaBit = "C:\\MEIA\\Bitacora.txt";
        String rutaDesUs = "C:\\MEIA\\Desc_Usuario.txt";
        String rutaDesBit = "C:\\MEIA\\Desc_Bitacora.txt";
        String rutaBack = "C:\\MEIA\\Backup.txt";
        String rutaDesBack = "C:\\MEIA\\Desc_Backup.txt";
        //se obtienen las listas de el archivo de backups y su descriptor
        List<String> listaBack = new ArrayList<>();
        if(comprobar(rutaBack, strError) > 0)
        {
            listaBack = Obtener(rutaBack, strError);
        }
        List<String> listaDesBack = Obtener(rutaDesBack, strError);
        //se agrega el registro a la lista de backups
        LocalDateTime fechaHoraActual = LocalDateTime.now();
        DateTimeFormatter forma = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        String todo = textBoxBackup.getText() + "|" + usuarioGlo.split("\\|")[0] + "|" + String.valueOf(fechaHoraActual.format(forma));
        listaBack.add(todo);
        // Definir un comparador personalizado
        Comparator<String> comparador = Comparator.comparing(s -> s.split("\\|")[1], String.CASE_INSENSITIVE_ORDER);
        // Ordenar la lista utilizando el comparador
        Collections.sort(listaBack, comparador);
        //borramos el antiguo contenido
        borrarContenidoArchivo(rutaBack);
        //ahora se llena con la nueva lista
        escribirLista(listaBack, rutaBack, strError);
        //ahora se hace lo mismo pero para el descriptor
        if(listaDesBack.get(1).equals("-") && listaDesBack.get(2).equals("-"))
        {
            listaDesBack.set(1, String.valueOf(fechaHoraActual.format(forma)));
            listaDesBack.set(2, usuarioGlo.split("\\|")[0]);
        }
        listaDesBack.set(3, String.valueOf(fechaHoraActual.format(forma)));
        listaDesBack.set(4, usuarioGlo.split("\\|")[0]);
        listaDesBack.set(5, String.valueOf(listaBack.size()));
        listaDesBack.set(6, String.valueOf(listaBack.size()));
        //se borra el contenido del descriptor
        borrarContenidoArchivo(rutaDesBack);
        //ahora se llena con la nueva lista
        escribirLista(listaDesBack, rutaDesBack, strError);
        //tiene que haber una ruta para la carpeta
        if(textBoxBackup.getText().isEmpty())
        {
            //si no hay, se muestra un mensaje de error
            JOptionPane.showMessageDialog(this, "Seleccione un directorio válido", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            //si si hay, se obtiene
            String rutaCar = textBoxBackup.getText();
            try 
            {
                //luego ya se mandan las copias a la carpeta elegida
                realizarBackup(rutaUs, rutaCar, "RecoveredUsuario.txt", strError);
                realizarBackup(rutaBit, rutaCar, "RecoveredBitacora.txt", strError);
                realizarBackup(rutaDesUs, rutaCar, "RecoveredDescUsuario.txt", strError);
                realizarBackup(rutaDesBit, rutaCar, "RecoveredDescBitacora.txt", strError);
                realizarBackup(rutaBack, rutaCar, "RecoveredBackup.txt", strError);
                realizarBackup(rutaDesBack, rutaCar, "RecoveredDescBackup.txt", strError);
                JOptionPane.showMessageDialog(this, "Backup realizado con éxito", "Listo", WIDTH);
            } 
            catch (Exception e) 
            {
                JOptionPane.showMessageDialog(this, "Error al realizar el backup", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnbackupActionPerformed

    private void realizarBackup(String rutaOrigen, String rutaDestino, String nombreNuevoArchivo, String strError) {
    try 
    {
        // Lee el contenido del archivo en rutaOrigen
        List<String> contenido = Obtener(rutaOrigen, strError);
        // Crea el nuevo archivo en la carpeta especificada
        String rutaNuevoArchivo = rutaDestino + File.separator + nombreNuevoArchivo;
        escribirLista(contenido, rutaNuevoArchivo, strError);
    } 
    catch (Exception e) 
    {
        JOptionPane.showMessageDialog(this, "Error al realizar el backup", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    public void escribirLista(List<String> lista, String ruta, String strError)
    {
        for (int i = 0; i < lista.size(); i++) 
        {
            LlenarArchivo(ruta, lista.get(i), strError);
        }
    }
    
    public boolean LlenarArchivo(String strPath,String strContenido,String strError)
    {
        File Archivo = new File(strPath);
        
        try
        {
                FileWriter Escribir = new FileWriter(Archivo,true);
                BufferedWriter bw = new BufferedWriter(Escribir);
                bw.write(strContenido+ System.getProperty( "line.separator" ));
                bw.close();
                Escribir.close();
                
                return true;
        }
        catch(IOException ex)
        {
            strError= ex.getMessage();
            return false;
        } 
        
    }
    
    private static boolean borrarContenidoArchivo(String strPath) {
        try {
            // Abre el archivo en modo de escritura sin añadir contenido (append = false)
            FileWriter escribir = new FileWriter(strPath, false);
            escribir.close();
            return true;
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "No",  "non", WIDTH);
            return false;
        }
    }
    
    public List<String> Obtener(String strPath,String strError)
    {
        //variable tipo archivo (en este caso es un txt)
        File Archivo = new File(strPath);
        //si se encuentra el archivo en la ruta indicada, pasa
        if(Archivo.exists()==true)
        {
            //se crea la lista a enviar
            List<String> ListaPunteo = new ArrayList<>();
            //se crea la variable que nos leerá el archivo
            FileReader LecturaArchivo;
            //try/cacht en caso que el archivo enviado no sea el indicado
            try {
                //se le envía el archivo a leer al lector
                LecturaArchivo = new FileReader(Archivo);
                //búfer de datos
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                //string que me guarda el texto por línea
                String Linea;
                //try/catch en caso que se envíe un archivo que no es el solicitado
                try 
                {
                    //la variable "Linea" adquiere el valor de la primera línea del archivo
                    Linea=LeerArchivo.readLine();
                    //se crea otro string donde se va a almacenar el texto por cada línea del archivo
                    String modeloNum = ""; 
                    //ciclo para leer linea por linea el archivo, mientras que la linea no sea null (no haya llegado al final del archivo), se repetirá el ciclo
                    while(Linea != null)
                    {
                        //si en la línea hay texto, se escribe
                        if(!"".equals(Linea))
                        {
                            //la variable modeloNum, adquiere el valor de lo que está en la línea que se está leyendo
                            modeloNum = Linea;
                        }
                        //se agrega ese modelo a la lista
                        ListaPunteo.add(modeloNum);
                        //pasa a la siguiente línea para que el ciclo continue 
                        Linea=LeerArchivo.readLine();
                    }
                    //se cierra el archivo
                    LecturaArchivo.close();
                    //se termina de leer
                    LeerArchivo.close();
                    //no habrá mensaje de error
                    strError="";
                    //se retorna la lista ya llena
                    return ListaPunteo;
                    
                }
                //catch para mostrar el mensaje de error
                catch (IOException ex) 
                {
                    //mensaje de error
                    strError= ex.getMessage();
                    //la lista se retorna nula
                    return null;
                }
            } 
            //catch para mostrar el mensaje de error
            catch (FileNotFoundException ex) 
            {
                //mensaje de error
                strError= ex.getMessage();
                //la lista se retorna nula
                return null;
            }            
        }
        //si el archivo no se encuentra en la ruta indicada, se muestra un mensaje de error y la lista que se envía estará vacía
        else
        {
            //mensaje de error
            strError="No existe el archivo";
            //lista nula
            return null;
        }
    }
    
    private static int buscarPorCriterio(List<String> lista, String criterio) 
    {
        for (int i = 0; i < lista.size(); i++) 
        {
            String[] partes = lista.get(i).split("\\|");
            if (partes.length > 0 && partes[0].equals(criterio) && partes[9].equals("1")) 
            {
                return i;
            }
        }
        return -1;  // No se encontró el elemento
    }
    
    public int punt(String cod, List<String> punteos)
    {
        //variable que guarda la puntuación final
        int puntu = 0;
        //puntuación va a ser igual a segundo número por el total de caracteres de la contraseña
        puntu = puntu + (cod.length() * Integer.parseInt(punteos.get(1)));
        //se crea la variable que guarde la cantidad de mayusculas en el string
        int mayus = 0;
        //se crea la variable que guarde la cantidad de letras en el string
        int letras = 0;
        //se crea la variable que guarde la cantidad de numeros en el string
        int nums = 0;
        //se crea la variable que guarde la cantidad de caracteres especiales en el string
        int especiales = 0;
        //se crea la variable que compruebe si solo hay letras
        boolean soloLetras = true;
        //se crea la variable que compruebe si solo hay numeros
        boolean soloNums = true;
        //ciclo para recorrer cada caracter del string
        for (char caracter : cod.toCharArray()) 
        {
            //se comprueba si el caracter está en mayuscula o no
            if(Character.isUpperCase(caracter))
            {
                //en caso que si, se le suma a la variable
                mayus++;
            }
            //se comprueba si el caracter es letra o no
            if(Character.isLetter(caracter))
            {
                //en caso que si, se agrega una unidad al contador
                letras++;
                //si hay por lo menos 1 letra significa que no hay solo numeros, por lo tanto se vuelve falso
                soloNums = false;
            }
            //se comprueba si el caracter es letra o no
            if(Character.isDigit(caracter))
            {
                //en caso que si, se agrega una unidad al contador
                nums++;
                //si hay por lo menos 1 numero significa que no hay solo letras, por lo tanto se vuelve falso
                soloLetras = false;
            }
            //se comprueba si el caracter es especial o no (si pertenece a /¿?%$#)
            if(caracter == '/' || caracter == '¿' || caracter == '?' || caracter == '%' || caracter == '$' || caracter == '#')
            {
                //en caso que si, se agrega una unidad al contador
                especiales++;
                //si hay por lo menos 1 especial significa que no hay solo numeros o solo letras, por lo tanto se vuelven falsos
                soloNums = false;
                soloLetras = false;
            }
        }
        //se calcula nuevamente la puntuación (tomando en cuenta solo mayúsculas
        puntu = puntu + (mayus * Integer.parseInt(punteos.get(2)));
        //se calcula nuevamente la puntuación (tomando en cuenta solo si son letras
        puntu = puntu + (letras + Integer.parseInt(punteos.get(3)));
        //se calcula nuevamente la puntuación (tomando en cuenta solo si son numeros
        puntu = puntu + (nums + Integer.parseInt(punteos.get(4)));
        //se calcula nuevamente la puntuación (tomando en cuenta solo si son numeros
        puntu = puntu + (especiales *( cod.length()+ Integer.parseInt(punteos.get(5))));
        //si solo hay letras se hace la resta
        if(soloLetras)
        {
            //si solo hay letras, se hace la resta
            puntu = puntu - Integer.parseInt(punteos.get(6));
        }
        //si solo hay numeros se hace la resta
        if(soloNums)
        {
            puntu = puntu - Integer.parseInt(punteos.get(7));
        }
        //se retorna el punteo
        return puntu;
    }
    
    public int comprobar(String strPath,String strError)
    {
        //variable tipo archivo (en este caso es un txt)
        File Archivo = new File(strPath);
        //si se encuentra el archivo en la ruta indicada, pasa
        if(Archivo.exists()==true)
        {
            //se crea la variable que nos leerá el archivo
            FileReader LecturaArchivo;
            //try/cacht en caso que el archivo enviado no sea el indicado
            try {
                //se le envía el archivo a leer al lector
                LecturaArchivo = new FileReader(Archivo);
                //búfer de datos
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                //string que me guarda el texto por línea
                String Linea;
                //try/catch en caso que se envíe un archivo que no es el solicitado
                try 
                {
                    //la variable "Linea" adquiere el valor de la primera línea del archivo
                    Linea=LeerArchivo.readLine();
                    //se crea otro string donde se va a almacenar el texto por cada línea del archivo
                    int contador = 0; 
                    //ciclo para leer linea por linea el archivo, mientras que la linea no sea null (no haya llegado al final del archivo), se repetirá el ciclo
                    while(Linea != null)
                    {
                        //si en la línea hay texto, se escribe
                        if(!"".equals(Linea))
                        {
                            //se cuenta cada línea
                            contador++;
                        }
                        //pasa a la siguiente línea para que el ciclo continue 
                        Linea=LeerArchivo.readLine();
                    }
                    //se cierra el archivo
                    LecturaArchivo.close();
                    //se termina de leer
                    LeerArchivo.close();
                    //no habrá mensaje de error
                    strError="";
                    //se envía la cantidad de objetos que hay
                    return contador;
                }
                //catch para mostrar el mensaje de error
                catch (IOException ex) 
                {
                    //mensaje de error
                    strError= ex.getMessage();
                    //la lista se retorna nula
                    return -1;
                }
            } 
            //catch para mostrar el mensaje de error
            catch (FileNotFoundException ex) 
            {
                //mensaje de error
                strError= ex.getMessage();
                //la lista se retorna nula
                return -1;
            }            
        }
        //si el archivo no se encuentra en la ruta indicada, se muestra un mensaje de error y la lista que se envía estará vacía
        else
        {
            //mensaje de error
            strError="No existe el archivo";
            //lista nula
            return -1;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MENU.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MENU.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MENU.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MENU.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MENU().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonFoto;
    private javax.swing.JButton botonListo;
    private javax.swing.JButton btnbackup;
    private javax.swing.JButton btnborrarusuario;
    private javax.swing.JButton btncerrarsesion;
    private javax.swing.JButton btnexaminarbackup;
    private javax.swing.JButton btnhaceradmin;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelApellido;
    private javax.swing.JLabel labelCorreo;
    private javax.swing.JLabel labelEstado;
    private javax.swing.JLabel labelFecha;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelNum;
    private javax.swing.JLabel labelUsuario;
    private javax.swing.JTextPane textBoxApellido;
    private javax.swing.JTextPane textBoxBackup;
    private javax.swing.JTextPane textBoxContraseña;
    private javax.swing.JTextPane textBoxCorreo;
    private javax.swing.JTextPane textBoxFecha;
    private javax.swing.JTextPane textBoxNombre;
    private javax.swing.JTextPane textBoxRutaFoto;
    private javax.swing.JTextPane textBoxTelefono;
    private javax.swing.JTextPane textBoxUsuario;
    private javax.swing.JTextPane txtadminusuario;
    private javax.swing.JTextPane txtborrarusuario;
    // End of variables declaration//GEN-END:variables
}

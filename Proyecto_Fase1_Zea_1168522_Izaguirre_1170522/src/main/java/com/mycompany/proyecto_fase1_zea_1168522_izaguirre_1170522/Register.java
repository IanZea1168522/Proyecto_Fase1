/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyecto_fase1_zea_1168522_izaguirre_1170522;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.io.*;
import java.time.LocalDate;
//librerías para listas genéricas
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
/**
 *
 * @author izeac
 */
public class Register extends javax.swing.JFrame {

    /**
     * Creates new form Register
     */
    public Register() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textBoxUsuario = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textBoxNombre = new javax.swing.JTextPane();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        textBoxApellido = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        textBoxContraseña = new javax.swing.JTextPane();
        jLabel6 = new javax.swing.JLabel();
        labelEstado = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        textBoxTelefono = new javax.swing.JTextPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        textBoxRutaFoto = new javax.swing.JTextPane();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        textBoxFecha = new javax.swing.JTextPane();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        textBoxCorreo = new javax.swing.JTextPane();
        jLabel11 = new javax.swing.JLabel();
        botonListo = new javax.swing.JButton();
        botonFoto = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Para registrarte, necesitamos que llenes todos los campos y que no dejes ninguno vacío");

        jLabel3.setText("Usuario: (no te excedas de los 20 caracteres");

        jScrollPane1.setViewportView(textBoxUsuario);

        jLabel4.setText("Nombre: (no te excedas de los 30 caracteres");

        jScrollPane2.setViewportView(textBoxNombre);

        jLabel5.setText("Apellido: (no te excedas de los 30 caracteres)");

        jScrollPane3.setViewportView(textBoxApellido);

        jScrollPane4.setViewportView(textBoxContraseña);

        jLabel6.setText("Contraseña: (no te excedas de los 40 caracteres)");

        labelEstado.setText("Estado: en proceso");

        jScrollPane5.setViewportView(textBoxTelefono);

        textBoxRutaFoto.setEnabled(false);
        jScrollPane6.setViewportView(textBoxRutaFoto);

        jLabel7.setText("Fecha de nacimiento: (d/m/a)");

        jLabel8.setText("Foto de perfil");

        jScrollPane7.setViewportView(textBoxFecha);

        jLabel10.setText("eMail: (no te excedas de los 40 caracteres)");

        jScrollPane8.setViewportView(textBoxCorreo);

        jLabel11.setText("Teléfono");

        botonListo.setText("¡Listo!");
        botonListo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonListoActionPerformed(evt);
            }
        });

        botonFoto.setText("Examinar...");
        botonFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonFotoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3)
                                .addComponent(jScrollPane1))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(138, 138, 138)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(215, 215, 215)
                                .addComponent(botonListo))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(185, 185, 185)
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(botonFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(21, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelEstado)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(botonFoto, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(botonListo)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonListoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonListoActionPerformed
        // TODO add your handling code here:
        try //try catch en caso de error
        {
            //se obtienen todos los textos de las text boxes
            String usuario = textBoxUsuario.getText();
            String nombre = textBoxNombre.getText();
            String apellido = textBoxApellido.getText();
            String contraseña = textBoxContraseña.getText();
            // Define el formato esperado
            DateTimeFormatter formato = DateTimeFormatter.ofPattern("d/M/yyyy");
            // Intenta convertir la cadena a LocalDateTime
            LocalDate fecha = LocalDate.parse(textBoxFecha.getText(), formato);
            String eMail = textBoxCorreo.getText();
            int telefono = -1;
            telefono = Integer.parseInt(textBoxTelefono.getText().trim());
            //se obtiene la ruta de la foto
            String ruta = textBoxRutaFoto.getText();
            //se comprueba primero que ningún campo esté vacío
            if(usuario.isEmpty() || nombre.isEmpty() || apellido.isEmpty() || contraseña.isEmpty() || telefono < 0 || eMail.isEmpty() || telefono < 1 || fecha == null)
            {
                JOptionPane.showMessageDialog(null, "Por favor llene todos los campos antes de continuar",  "Error", WIDTH);
            }
            else
            {
                //todos los campos están correctamente llenos, se comprueba la seguridad de la contraseña
                //ruta de mi txt de puntuacion
                String rutaPuntuacion = "C:\\MEIA\\puntuacion.txt";
                //ruta de mi txt de resultados
                String rutaResultado = "C:\\MEIA\\resultado.txt";
                //lista de los punteos del tzt
                List<String> listaPunts = new ArrayList<>();
                //lista de los resultados del txt
                List<String> listaRes = new ArrayList<>();
                //mensaje de error
                String strError="";
                //se llena la lista leyendo el archivo (con el método creado)
                listaPunts = Obtener(rutaPuntuacion, strError);
                //se llena la otra lista leyendo el otro archivo (con el método creado)
                listaRes = Obtener(rutaResultado, strError);
                //si las listas no están vacías/son nulls se continúa el código
                if((listaPunts.size() > 0 && listaPunts != null) || (listaRes.size() > 0 && listaRes != null))
                {
                    //se comprueba si el tamaño de la entrada es menor al primer elemento de la lista 
                    if(contraseña.length() < Integer.parseInt(listaPunts.get(0)))
                    {
                        //es menor a 6 caracteres, se indica que tienen que ser mínimo 6, que es el número en la primera posición del archivo de texto
                        JOptionPane.showMessageDialog(null, "El mínimo de caracteres es 6, vuelva a intentarlo", "Error", WIDTH);
                    }
                    else
                    {
                        //variable que guarde la puntuación
                        int puntuacion = 0;
                        //se obtiene la puntuación
                        puntuacion = punt(contraseña, listaPunts);
                        //variable que guarda el resultado
                        String resul = ""; 
                        //se obtiene en que rango está
                        if(puntuacion <= Integer.parseInt(listaRes.get(0).split(",")[1]))
                        {
                            //se indica que es insegura
                            resul = "Contraseña insegura";
                            labelEstado.setText("Estado: " + resul);
                        }
                        if(puntuacion <= Integer.parseInt(listaRes.get(1).split(",")[1]))
                        {
                            //se indica que es poca segura
                            resul = "Contraseña poco segura";
                            labelEstado.setText("Estado: " + resul);
                        }
                        else if(puntuacion <= Integer.parseInt(listaRes.get(2).split(",")[1]))
                        {
                            //se indica que es segura
                            resul = "Contraseña segura";
                            labelEstado.setText("Estado: " + resul);
                        }
                        else if(puntuacion >= Integer.parseInt(listaRes.get(3).split(",")[0]))
                        {
                            //se indica que es muy segura
                            resul = "Contraseña muy segura";
                            labelEstado.setText("Estado: " + resul);
                        }
                        //si su contraseña es insegura o poco segura, pedir que se vuelva a ingresar, de lo contrario, puede continuar
                        if(resul.equals("Contraseña insegura") || resul.equals("Contraseña poco segura"))
                        {
                            //indicar que cambie de contraseña
                            JOptionPane.showMessageDialog(null, "La contraseña no es lo suficientemente segura, intente oon otra ",  "Error", WIDTH);
                        }
                        else
                        {
                            //la última prueba es verificar que ningún campo se exeda del límite
                            if(usuario.length() > 20 || nombre.length() > 30 || apellido.length() > 30 || contraseña.length() > 40 || eMail.length() > 40)
                            {
                                //si es mas grande que el solicitado, se muestra mensaje de error para que lo intente de nuevo
                                JOptionPane.showMessageDialog(null, "Alguno de los campos excede el número máximo de caracteres, vuelva a intentarlo",  "Error", WIDTH);
                            }
                            else
                            {
                                //se crea el string que guarde ya todo el objeto, primero creando el int que guarde el rol
                                int rol = 0;
                                //se comprueba su rol
                                String rutaBit = "C:\\MEIA\\Bitacora.txt";
                                String rutaUs = "C:\\MEIA\\Usuario.txt";
                                String rutaDesBit = "C:\\MEIA\\Desc_Bitacora.txt";
                                String rutaDesUs = "C:\\MEIA\\Desc_Usuario.txt";
                                if(comprobar(rutaBit, strError) == 0 && comprobar(rutaUs, strError) == 0)
                                {
                                    rol = 1;
                                }
                                //se crea el string
                                String todo = usuario + "|" + nombre + "|" + apellido + "|" + contraseña + "|" + rol + "|" + fecha + "|" + eMail + "|" + telefono + "|" + ruta + "|" + "1";
                                //se obtienen los datos tanto de la bitacora como del archivo de usuarios (y sus respectivos descriptores)
                                List<String> listaBit = new ArrayList<>();
                                List<String> listaUs = new ArrayList<>();
                                List<String> listaDesBit = new ArrayList<>();
                                List<String> listaDesUs = new ArrayList<>();
                                if(comprobar(rutaBit, strError) > 0)
                                {
                                    listaBit = Obtener(rutaBit, strError);
                                }
                                if(comprobar(rutaUs, strError) > 0)
                                {
                                    listaUs = Obtener(rutaUs, strError);
                                }
                                //se comprueba si el usuario ya existe
                                boolean existe = false;
                                List<String> plantilla = new ArrayList<>();
                                for (int i = 0; i < listaUs.size(); i++) 
                                {
                                    //si el usuario ingresado es igual a cualquiera de los que están en el archivo
                                    if((usuario.equals(listaUs.get(i).split("\\|")[0])))
                                    {
                                        //si es así el bool pasa a ser verdadero
                                        existe = true;
                                        plantilla = listaUs;
                                        //así mismo, se termina el ciclo
                                        break;
                                    }
                                }
                                if(!existe)
                                {
                                    for (int i = 0; i < listaBit.size(); i++) 
                                    {
                                        //si el usuario ingresado es igual a cualquiera de los que están en el archivo
                                        if((usuario.equals(listaBit.get(i).split("\\|")[0])))
                                        {
                                            //si es así se guarda la posición, que nos servirá para la parte de las contraseñas, y el bool pasa a ser verdadero
                                            existe = true;
                                            plantilla = listaBit;
                                            //así mismo, se termina el ciclo
                                            break;
                                        }
                                    }   
                                }
                                if(existe)
                                {
                                    JOptionPane.showMessageDialog(null, "El usuario parece que ya existe, pruebe con otro",  "Error", WIDTH);
                                }
                                else
                                {
                                    //se obtiene la informacion de los descriptores
                                    listaDesBit = Obtener(rutaDesBit, strError);
                                    listaDesUs = Obtener(rutaDesUs, strError);
                                    // Obtener la fecha y hora actual una sola vez
                                    LocalDateTime fechaHoraActual = LocalDateTime.now();
                                    DateTimeFormatter forma = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
                                    //se comprueba si se puede escribir
                                    if(listaBit.size() >= Integer.parseInt(listaDesUs.get(8)))
                                    {
                                        //borramos el contenido de los archivos (lo que estaba escrito está en la lista, por lo que no lo perdemos)
                                        borrarContenidoArchivo(rutaBit);
                                        borrarContenidoArchivo(rutaUs);
                                        //agregamos los elementos que estén activos a la lista de usuarios
                                        for (int i = 0; i < listaBit.size(); i++) 
                                        {
                                            //se comprueba si está activo o no
                                            if(listaBit.get(i).split("\\|")[9].equals("1"))
                                            {
                                                //si es que sí, se agrega a la lista
                                                listaUs.add(listaBit.get(i));
                                            }
                                        }
                                        // Definir un comparador personalizado
                                        Comparator<String> comparador = Comparator.comparing(s -> s.split("\\|")[1], String.CASE_INSENSITIVE_ORDER);
                                        // Ordenar la lista utilizando el comparador
                                        Collections.sort(listaUs, comparador);
                                        //se llena el archivo ahora con los nuevos datos
                                        for (int j = 0; j < listaUs.size(); j++) 
                                        {
                                            LlenarArchivo(rutaUs, listaUs.get(j), strError);
                                        }
                                        //se comprueba si fue la primera vez que se modificó el archivo, si es así se modifican todos los parámetros, si no solo se cambian los de "modificacion"
                                        if (listaDesUs.get(1).equals("-") && listaDesUs.get(2).equals("-")) 
                                        {
                                            // Asignar valores si las posiciones 1 y 2 son "-"
                                            listaDesUs.set(1, fechaHoraActual.format(forma));
                                            listaDesUs.set(2, usuario);
                                        }
                                        // Asignar valores para las posiciones 3 y 4
                                        listaDesUs.set(3, fechaHoraActual.format(forma));
                                        listaDesUs.set(4, usuario);
                                        // Asignar valores para las posiciones 5, 6 y 7
                                        listaDesUs.set(5, String.valueOf(listaUs.size()));
                                        listaDesUs.set(6, String.valueOf(listaUs.size()));
                                        listaDesUs.set(7, "0");
                                        // Borrar el archivo descriptor
                                        borrarContenidoArchivo(rutaDesUs);
                                        // Llenar el archivo con los nuevos valores
                                        for (int j = 0; j < listaDesUs.size(); j++) 
                                        {
                                            LlenarArchivo(rutaDesUs, listaDesUs.get(j), strError);
                                        }
                                        //limpiamos la lista de la bitacora, por que en ella ya no hay nada
                                        listaBit.clear();
                                    }
                                    //ahora que se sabe que se puede escribir en la bitacora, se agrega la cadena a la lista de la bitacora
                                    listaBit.add(todo);
                                    //se borra el contenido de la bitacora para que sea reescrito
                                    borrarContenidoArchivo(rutaBit);
                                    //se reescribe la bitacora ahora con el elemento agregado
                                    for (int i = 0; i < listaBit.size(); i++) 
                                    {
                                        LlenarArchivo(rutaBit, listaBit.get(i), strError);
                                    }
                                    //por último modificamos los valores del descriptor de bitacora
                                    borrarContenidoArchivo(rutaDesBit);
                                    //se comprueba si ya se había modificado antes o no
                                    if (listaDesBit.get(1).equals("-") && listaDesBit.get(2).equals("-")) 
                                    {
                                        // Asignar valores si las posiciones 1 y 2 son "-"
                                        listaDesBit.set(1, fechaHoraActual.format(forma));
                                        listaDesBit.set(2, usuario);
                                    }
                                    // Asignar valores para las posiciones 3 y 4
                                    listaDesBit.set(3, fechaHoraActual.format(forma));
                                    listaDesBit.set(4, usuario);
                                    //ahora para la 5
                                    listaDesBit.set(5, String.valueOf(listaBit.size()));
                                    //para la 6 se cuenta cuantos usuarios activos hay, y eso será lo que se agregue a esa posición
                                    int contarActivo = 0;
                                    //ciclo para ir contando los usuarios activos
                                    for(String elemento : listaBit)
                                    {
                                        //se divide el elemento por "|"
                                        String[] partes = elemento.split("\\|");
                                        //si en la posición 9 hay un 1, se cuenta
                                        if (partes.length >= 10 && "1".equals(partes[9])) 
                                        {
                                            contarActivo++;
                                        }
                                    }
                                    //ahora en la posición 6 ya se pone cuantos activos habían
                                    listaDesBit.set(6, String.valueOf(contarActivo));
                                    //por ultimo los inactivos, que son la diferencia entre el todal y los activos
                                    listaDesBit.set(7, String.valueOf((listaBit.size() - contarActivo)));
                                    //por último se llena el archivo de nuevo
                                    for (int i = 0; i < listaDesBit.size(); i++) 
                                    {
                                        LlenarArchivo(rutaDesBit, listaDesBit.get(i), strError);
                                    }
                                    //por último indicamos que el usuario fue creado y que puede ingresar con sus credenciales creadas
                                    JOptionPane.showMessageDialog(null, "Listo, ha podido crear su cuenta con exito, ingrese sus credenciales para poder ingresar a su nueva cuenta",  "Finalizado", WIDTH);
                                }
                            }
                        }
                    }
                }
            }
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, "Datos ingresados errómeos, vulve a intentarlo",  "Error", WIDTH);
        }
    }//GEN-LAST:event_botonListoActionPerformed

    public boolean LlenarArchivo(String strPath,String strContenido,String strError)
    {
        File Archivo = new File(strPath);
        
        try
        {
                FileWriter Escribir = new FileWriter(Archivo,true);
                BufferedWriter bw = new BufferedWriter(Escribir);
                bw.write(strContenido+ System.getProperty( "line.separator" ));
                bw.close();
                Escribir.close();
                
                return true;
        }
        catch(IOException ex)
        {
            strError= ex.getMessage();
            return false;
        } 
        
    }
    
    private static boolean borrarContenidoArchivo(String strPath) {
        try {
            // Abre el archivo en modo de escritura sin añadir contenido (append = false)
            FileWriter escribir = new FileWriter(strPath, false);
            escribir.close();
            return true;
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "No",  "non", WIDTH);
            return false;
        }
    }
    
    public int punt(String cod, List<String> punteos)
    {
        //variable que guarda la puntuación final
        int puntu = 0;
        //puntuación va a ser igual a segundo número por el total de caracteres de la contraseña
        puntu = puntu + (cod.length() * Integer.parseInt(punteos.get(1)));
        //se crea la variable que guarde la cantidad de mayusculas en el string
        int mayus = 0;
        //se crea la variable que guarde la cantidad de letras en el string
        int letras = 0;
        //se crea la variable que guarde la cantidad de numeros en el string
        int nums = 0;
        //se crea la variable que guarde la cantidad de caracteres especiales en el string
        int especiales = 0;
        //se crea la variable que compruebe si solo hay letras
        boolean soloLetras = true;
        //se crea la variable que compruebe si solo hay numeros
        boolean soloNums = true;
        //ciclo para recorrer cada caracter del string
        for (char caracter : cod.toCharArray()) 
        {
            //se comprueba si el caracter está en mayuscula o no
            if(Character.isUpperCase(caracter))
            {
                //en caso que si, se le suma a la variable
                mayus++;
            }
            //se comprueba si el caracter es letra o no
            if(Character.isLetter(caracter))
            {
                //en caso que si, se agrega una unidad al contador
                letras++;
                //si hay por lo menos 1 letra significa que no hay solo numeros, por lo tanto se vuelve falso
                soloNums = false;
            }
            //se comprueba si el caracter es letra o no
            if(Character.isDigit(caracter))
            {
                //en caso que si, se agrega una unidad al contador
                nums++;
                //si hay por lo menos 1 numero significa que no hay solo letras, por lo tanto se vuelve falso
                soloLetras = false;
            }
            //se comprueba si el caracter es especial o no (si pertenece a /¿?%$#)
            if(caracter == '/' || caracter == '¿' || caracter == '?' || caracter == '%' || caracter == '$' || caracter == '#')
            {
                //en caso que si, se agrega una unidad al contador
                especiales++;
                //si hay por lo menos 1 especial significa que no hay solo numeros o solo letras, por lo tanto se vuelven falsos
                soloNums = false;
                soloLetras = false;
            }
        }
        //se calcula nuevamente la puntuación (tomando en cuenta solo mayúsculas
        puntu = puntu + (mayus * Integer.parseInt(punteos.get(2)));
        //se calcula nuevamente la puntuación (tomando en cuenta solo si son letras
        puntu = puntu + (letras + Integer.parseInt(punteos.get(3)));
        //se calcula nuevamente la puntuación (tomando en cuenta solo si son numeros
        puntu = puntu + (nums + Integer.parseInt(punteos.get(4)));
        //se calcula nuevamente la puntuación (tomando en cuenta solo si son numeros
        puntu = puntu + (especiales *( cod.length()+ Integer.parseInt(punteos.get(5))));
        //si solo hay letras se hace la resta
        if(soloLetras)
        {
            //si solo hay letras, se hace la resta
            puntu = puntu - Integer.parseInt(punteos.get(6));
        }
        //si solo hay numeros se hace la resta
        if(soloNums)
        {
            puntu = puntu - Integer.parseInt(punteos.get(7));
        }
        //se retorna el punteo
        return puntu;
    }
    
    public List<String> Obtener(String strPath,String strError)
    {
        //variable tipo archivo (en este caso es un txt)
        File Archivo = new File(strPath);
        //si se encuentra el archivo en la ruta indicada, pasa
        if(Archivo.exists()==true)
        {
            //se crea la lista a enviar
            List<String> ListaPunteo = new ArrayList<>();
            //se crea la variable que nos leerá el archivo
            FileReader LecturaArchivo;
            //try/cacht en caso que el archivo enviado no sea el indicado
            try {
                //se le envía el archivo a leer al lector
                LecturaArchivo = new FileReader(Archivo);
                //búfer de datos
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                //string que me guarda el texto por línea
                String Linea;
                //try/catch en caso que se envíe un archivo que no es el solicitado
                try 
                {
                    //la variable "Linea" adquiere el valor de la primera línea del archivo
                    Linea=LeerArchivo.readLine();
                    //se crea otro string donde se va a almacenar el texto por cada línea del archivo
                    String modeloNum = ""; 
                    //ciclo para leer linea por linea el archivo, mientras que la linea no sea null (no haya llegado al final del archivo), se repetirá el ciclo
                    while(Linea != null)
                    {
                        //si en la línea hay texto, se escribe
                        if(!"".equals(Linea))
                        {
                            //la variable modeloNum, adquiere el valor de lo que está en la línea que se está leyendo
                            modeloNum = Linea;
                        }
                        //se agrega ese modelo a la lista
                        ListaPunteo.add(modeloNum);
                        //pasa a la siguiente línea para que el ciclo continue 
                        Linea=LeerArchivo.readLine();
                    }
                    //se cierra el archivo
                    LecturaArchivo.close();
                    //se termina de leer
                    LeerArchivo.close();
                    //no habrá mensaje de error
                    strError="";
                    //se retorna la lista ya llena
                    return ListaPunteo;
                    
                }
                //catch para mostrar el mensaje de error
                catch (IOException ex) 
                {
                    //mensaje de error
                    strError= ex.getMessage();
                    //la lista se retorna nula
                    return null;
                }
            } 
            //catch para mostrar el mensaje de error
            catch (FileNotFoundException ex) 
            {
                //mensaje de error
                strError= ex.getMessage();
                //la lista se retorna nula
                return null;
            }            
        }
        //si el archivo no se encuentra en la ruta indicada, se muestra un mensaje de error y la lista que se envía estará vacía
        else
        {
            //mensaje de error
            strError="No existe el archivo";
            //lista nula
            return null;
        }
    }
    
    public int comprobar(String strPath,String strError)
    {
        //variable tipo archivo (en este caso es un txt)
        File Archivo = new File(strPath);
        //si se encuentra el archivo en la ruta indicada, pasa
        if(Archivo.exists()==true)
        {
            //se crea la variable que nos leerá el archivo
            FileReader LecturaArchivo;
            //try/cacht en caso que el archivo enviado no sea el indicado
            try {
                //se le envía el archivo a leer al lector
                LecturaArchivo = new FileReader(Archivo);
                //búfer de datos
                BufferedReader LeerArchivo = new BufferedReader(LecturaArchivo);
                //string que me guarda el texto por línea
                String Linea;
                //try/catch en caso que se envíe un archivo que no es el solicitado
                try 
                {
                    //la variable "Linea" adquiere el valor de la primera línea del archivo
                    Linea=LeerArchivo.readLine();
                    //se crea otro string donde se va a almacenar el texto por cada línea del archivo
                    int contador = 0; 
                    //ciclo para leer linea por linea el archivo, mientras que la linea no sea null (no haya llegado al final del archivo), se repetirá el ciclo
                    while(Linea != null)
                    {
                        //si en la línea hay texto, se escribe
                        if(!"".equals(Linea))
                        {
                            //se cuenta cada línea
                            contador++;
                        }
                        //pasa a la siguiente línea para que el ciclo continue 
                        Linea=LeerArchivo.readLine();
                    }
                    //se cierra el archivo
                    LecturaArchivo.close();
                    //se termina de leer
                    LeerArchivo.close();
                    //no habrá mensaje de error
                    strError="";
                    //se envía la cantidad de objetos que hay
                    return contador;
                }
                //catch para mostrar el mensaje de error
                catch (IOException ex) 
                {
                    //mensaje de error
                    strError= ex.getMessage();
                    //la lista se retorna nula
                    return -1;
                }
            } 
            //catch para mostrar el mensaje de error
            catch (FileNotFoundException ex) 
            {
                //mensaje de error
                strError= ex.getMessage();
                //la lista se retorna nula
                return -1;
            }            
        }
        //si el archivo no se encuentra en la ruta indicada, se muestra un mensaje de error y la lista que se envía estará vacía
        else
        {
            //mensaje de error
            strError="No existe el archivo";
            //lista nula
            return -1;
        }
    }
    
    private void botonFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonFotoActionPerformed
        // TODO add your handling code here:
        JFileChooser dialogo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Imágenes (*.jpg, *.png)", "jpg", "png");
        File ficheroImagen;
        String rutaArchivo;
        dialogo.setFileFilter(filtro);

        int valor = dialogo.showOpenDialog(this);
        if (valor == JFileChooser.APPROVE_OPTION) {
            ficheroImagen = dialogo.getSelectedFile();
            rutaArchivo = ficheroImagen.getPath();
            // Verificar que el archivo existe y tiene una extensión permitida
            if (ficheroImagen.exists() && (rutaArchivo.endsWith(".jpg") || rutaArchivo.endsWith(".png"))) {
                textBoxRutaFoto.setText(rutaArchivo);
            } else {
                // Mostrar un mensaje de error si el archivo no cumple con los requisitos
                JOptionPane.showMessageDialog(this, "Seleccione un archivo válido (.jpg o .png)", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_botonFotoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Register().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonFoto;
    private javax.swing.JButton botonListo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel labelEstado;
    private javax.swing.JTextPane textBoxApellido;
    private javax.swing.JTextPane textBoxContraseña;
    private javax.swing.JTextPane textBoxCorreo;
    private javax.swing.JTextPane textBoxFecha;
    private javax.swing.JTextPane textBoxNombre;
    private javax.swing.JTextPane textBoxRutaFoto;
    private javax.swing.JTextPane textBoxTelefono;
    private javax.swing.JTextPane textBoxUsuario;
    // End of variables declaration//GEN-END:variables
}
